// ‚úÖ M√©todo HTTP ‚Üí acci√≥n por defecto
const accionPorMetodo = {
  GET: "ver",
  POST: "crear",
  PUT: "editar",
  PATCH: "editar",
  DELETE: "eliminar",
};

// ‚úÖ Cache para m√≥dulos (evitar cargar en cada request)
let modulosCache = null;
let ultimaActualizacion = 0;
const CACHE_DURACION = 5 * 60 * 1000; // 5 minutos

// ‚úÖ Definici√≥n completa de m√≥dulos
function obtenerModulosCompletos() {
  return [
    {
      id: "obras",
      nombre: "Obras",
      ruta: "/obras",
      descripcion: "Gesti√≥n de obras y proyectos",
      acciones: ["acceso", "ver", "crear", "editar", "eliminar", "exportar"],
      categoria: "operacional",
      icon: "üèóÔ∏è",
    },
    {
      id: "tareas",
      nombre: "Tareas",
      ruta: "/obras/tareas",
      descripcion: "Gesti√≥n de tareas de obras",
      acciones: ["acceso", "ver", "crear", "editar", "eliminar", "asignar"],
      categoria: "operacional",
      icon: "üìã",
      padre: "obras",
    },
    {
      id: "servicios",
      nombre: "Servicios",
      ruta: "/obras/servicios",
      descripcion: "Gesti√≥n de servicios disponibles",
      acciones: ["acceso", "ver", "crear", "editar", "eliminar"],
      categoria: "operacional",
      icon: "üîß",
      padre: "obras",
    },
    {
      id: "materiales",
      nombre: "Materiales",
      ruta: "/materiales",
      descripcion: "Gesti√≥n de materiales y stock",
      acciones: [
        "acceso",
        "ver",
        "crear",
        "editar",
        "eliminar",
        "exportar",
        "importar",
      ],
      categoria: "operacional",
      icon: "üì¶",
    },
    {
      id: "presupuestos",
      nombre: "Presupuestos",
      ruta: "/obras/presupuestos",
      descripcion: "Gesti√≥n de presupuestos",
      acciones: ["acceso", "ver", "crear", "editar", "eliminar", "aprobar"],
      categoria: "operacional",
      icon: "üí∞",
      padre: "obras",
    },
    {
      id: "facturas",
      nombre: "Facturas",
      ruta: "/obras/presupuestos/facturas",
      descripcion: "Gesti√≥n de facturas",
      acciones: ["acceso", "ver", "crear", "editar", "eliminar", "cobrar"],
      categoria: "operacional",
      icon: "üßæ",
      padre: "presupuestos",
    },
    {
      id: "recibos",
      nombre: "Recibos",
      ruta: "/obras/presupuestos/recibos",
      descripcion: "Gesti√≥n de recibos",
      acciones: ["acceso", "ver", "crear", "editar", "eliminar"],
      categoria: "operacional",
      icon: "üßæ",
      padre: "presupuestos",
    },
    {
      id: "usuarios",
      nombre: "Usuarios",
      ruta: "/usuarios",
      descripcion: "Gesti√≥n de usuarios del sistema",
      acciones: ["acceso", "ver", "crear", "editar", "eliminar", "activar"],
      categoria: "administracion",
      icon: "üë•",
    },
    {
      id: "roles",
      nombre: "Roles",
      ruta: "/system/roles",
      descripcion: "Gesti√≥n de roles y permisos",
      acciones: ["acceso", "ver", "crear", "editar", "eliminar", "asignar"],
      categoria: "sistema",
      icon: "üîê",
    },
    {
      id: "directorios",
      nombre: "Directorio Empleados",
      ruta: "/usuarios/directorios",
      descripcion: "Directorio de empleados",
      acciones: ["acceso", "ver", "crear", "editar", "eliminar", "exportar"],
      categoria: "administracion",
      icon: "üìá",
      padre: "usuarios",
    },
    {
      id: "clientes",
      nombre: "Clientes",
      ruta: "/clientes",
      descripcion: "Gesti√≥n de clientes",
      acciones: ["acceso", "ver", "crear", "editar", "eliminar", "exportar"],
      categoria: "operacional",
      icon: "üè¢",
    },
    {
      id: "estados",
      nombre: "Estados",
      ruta: "/system/estados",
      descripcion: "Gesti√≥n de estados del sistema",
      acciones: ["acceso", "ver", "crear", "editar", "eliminar"],
      categoria: "sistema",
      icon: "üîÑ",
    },
    {
      id: "modulos",
      nombre: "M√≥dulos",
      ruta: "/system/modulos",
      descripcion: "Gesti√≥n de m√≥dulos del sistema",
      acciones: ["acceso", "ver", "administrar"],
      categoria: "sistema",
      icon: "üß©",
    },
    {
      id: "branding",
      nombre: "Branding",
      ruta: "/system/branding",
      descripcion: "Configuraci√≥n de marca y apariencia",
      acciones: ["acceso", "ver", "editar"],
      categoria: "sistema",
      icon: "üé®",
    },
  ];
}

// ‚úÖ Obtener m√≥dulos con cache
async function obtenerModulosConCache() {
  const ahora = Date.now();

  if (!modulosCache || ahora - ultimaActualizacion > CACHE_DURACION) {
    console.log("üîÑ Actualizando cache de m√≥dulos...");

    try {
      // ‚úÖ Intentar cargar desde tu servicio TypeScript (si est√° disponible)
      const {
        obtenerModulosParaPermisos,
      } = require("../../web/app/system/modulos/modulosService");
      modulosCache = await obtenerModulosParaPermisos();

      // ‚úÖ Por ahora usar la definici√≥n local
      modulosCache = obtenerModulosCompletos();
    } catch (error) {
      console.warn(
        "‚ö†Ô∏è Error al cargar m√≥dulos externos, usando definici√≥n local:",
        error.message
      );
      modulosCache = obtenerModulosCompletos();
    }

    ultimaActualizacion = ahora;
    console.log(`‚úÖ Cache actualizado con ${modulosCache.length} m√≥dulos`);
  }

  return modulosCache;
}

// ‚úÖ Crear patrones de ruta din√°micamente desde los m√≥dulos
function crearPatronesDeRuta(modulos) {
  const patrones = [];

  modulos.forEach((modulo) => {
    let ruta = modulo.ruta;

    // ‚úÖ Escapar caracteres especiales de regex
    ruta = ruta.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");

    // ‚úÖ Patrones m√°s espec√≠ficos primero
    const rutaEscapada = ruta.replace(/\\\//g, "\\/");

    // Patr√≥n exacto: /usuarios$ o /usuarios/$
    const patronExacto = "^" + rutaEscapada + "(\\/)?$";

    // Patr√≥n con ID: /usuarios/123 o /usuarios/123/cualquier-cosa
    const patronConId = "^" + rutaEscapada + "\\/\\d+(\\/.*)?$";

    // Patr√≥n con subcarpetas: /usuarios/cualquier-cosa
    const patronGeneral = "^" + rutaEscapada + "(\\/.*)?$";

    // ‚úÖ Agregar en orden de especificidad (m√°s espec√≠fico = mayor prioridad)
    const profundidad = ruta.split("/").length;

    patrones.push({
      pattern: new RegExp(patronExacto),
      moduloId: modulo.id,
      ruta: modulo.ruta,
      tipo: "exacto",
      prioridad: profundidad * 100 + 3, // M√°xima prioridad para rutas exactas
    });

    patrones.push({
      pattern: new RegExp(patronConId),
      moduloId: modulo.id,
      ruta: modulo.ruta,
      tipo: "con-id",
      prioridad: profundidad * 100 + 2, // Alta prioridad para rutas con ID
    });

    patrones.push({
      pattern: new RegExp(patronGeneral),
      moduloId: modulo.id,
      ruta: modulo.ruta,
      tipo: "general",
      prioridad: profundidad * 100 + 1, // Prioridad normal para rutas generales
    });
  });

  // ‚úÖ Ordenar por prioridad (mayor prioridad primero)
  patrones.sort((a, b) => b.prioridad - a.prioridad);

  return patrones;
}

// ‚úÖ Detecta acciones "especiales" por sufijo de ruta
function resolverAccion(req) {
  const p = req.path || req.originalUrl || "";
  const metodo = req.method;

  console.log(`üéØ Resolviendo acci√≥n para: ${metodo} ${p}`);

  // ‚úÖ Acciones especiales por sufijo de ruta (orden de especificidad)
  const accionesEspeciales = [
    { patron: /\/aprobar(\/|$)/, accion: "aprobar" },
    { patron: /\/cobrar(\/|$)/, accion: "cobrar" },
    { patron: /\/asignar(\/|$)/, accion: "asignar" },
    { patron: /\/activar(\/|$)/, accion: "activar" },
    { patron: /\/desactivar(\/|$)/, accion: "activar" }, // Misma acci√≥n que activar
    { patron: /\/importar(\/|$)/, accion: "importar" },
    { patron: /\/exportar(\/|$)/, accion: "exportar" },
    { patron: /\/administrar(\/|$)/, accion: "administrar" },
    { patron: /\/duplicar(\/|$)/, accion: "crear" }, // Duplicar requiere permiso de crear
    { patron: /\/clonar(\/|$)/, accion: "crear" },
    { patron: /\/restore(\/|$)/, accion: "editar" }, // Restaurar requiere permiso de editar
    { patron: /\/archive(\/|$)/, accion: "editar" },
  ];

  for (const { patron, accion } of accionesEspeciales) {
    if (patron.test(p)) {
      console.log(`üìã Acci√≥n especial detectada: ${accion}`);
      return accion;
    }
  }

  // ‚úÖ Acci√≥n por m√©todo HTTP
  const accion = accionPorMetodo[metodo] || "ver";
  console.log(`üìã Acci√≥n por m√©todo ${metodo}: ${accion}`);
  return accion;
}

// ‚úÖ Resolver m√≥dulo con logs detallados
async function resolverModulo(ruta) {
  console.log(`üîç Resolviendo m√≥dulo para ruta: ${ruta}`);

  try {
    const modulos = await obtenerModulosConCache();
    const patrones = crearPatronesDeRuta(modulos);

    console.log(`üîç Probando ${patrones.length} patrones para: ${ruta}`);

    for (const patron of patrones) {
      if (patron.pattern.test(ruta)) {
        console.log(
          `‚úÖ M√≥dulo encontrado: ${patron.moduloId} (ruta: ${patron.ruta}, tipo: ${patron.tipo}, prioridad: ${patron.prioridad})`
        );
        return patron.moduloId;
      }
    }

    console.log(`‚ö†Ô∏è No se encontr√≥ m√≥dulo para la ruta: ${ruta}`);
    return null;
  } catch (error) {
    console.error(`‚ùå Error al resolver m√≥dulo para ${ruta}:`, error);
    return null;
  }
}

// ‚úÖ Funci√≥n para obtener todos los m√≥dulos mapeados
async function obtenerModulosMapeados() {
  try {
    const modulos = await obtenerModulosConCache();
    return modulos.map((m) => m.id);
  } catch (error) {
    console.error("‚ùå Error al obtener m√≥dulos mapeados:", error);
    return [];
  }
}

// ‚úÖ Funci√≥n para verificar si una ruta est√° mapeada
async function esRutaMapeada(ruta) {
  try {
    const moduloId = await resolverModulo(ruta);
    return moduloId !== null;
  } catch (error) {
    console.error(`‚ùå Error al verificar ruta ${ruta}:`, error);
    return false;
  }
}

// ‚úÖ Funci√≥n para debug: mostrar todas las rutas mapeadas
async function debugRutas() {
  try {
    const modulos = await obtenerModulosConCache();
    console.log("üìã M√≥dulos mapeados:");
    modulos.forEach((modulo, index) => {
      console.log(
        `  ${index + 1}. ${modulo.ruta} ‚Üí ${modulo.id} (${modulo.nombre}) [${modulo.categoria}]`
      );
      if (modulo.acciones && modulo.acciones.length > 0) {
        console.log(`     Acciones: ${modulo.acciones.join(", ")}`);
      }
    });
    return modulos;
  } catch (error) {
    console.error("‚ùå Error al mostrar debug de rutas:", error);
    return [];
  }
}

// ‚úÖ Funci√≥n para obtener m√≥dulo espec√≠fico por ID
async function obtenerModuloPorId(moduloId) {
  try {
    const modulos = await obtenerModulosConCache();
    const modulo = modulos.find((m) => m.id === moduloId);

    if (!modulo) {
      console.warn(`‚ö†Ô∏è M√≥dulo no encontrado: ${moduloId}`);
      return null;
    }

    return modulo;
  } catch (error) {
    console.error(`‚ùå Error al obtener m√≥dulo ${moduloId}:`, error);
    return null;
  }
}

// ‚úÖ Funci√≥n para obtener m√≥dulos por categor√≠a
async function obtenerModulosPorCategoria() {
  try {
    const modulos = await obtenerModulosConCache();
    const categorias = {};

    modulos.forEach((modulo) => {
      const categoria = modulo.categoria || "sin-categoria";
      if (!categorias[categoria]) {
        categorias[categoria] = [];
      }
      categorias[categoria].push(modulo);
    });

    return categorias;
  } catch (error) {
    console.error("‚ùå Error al agrupar m√≥dulos por categor√≠a:", error);
    return {};
  }
}

// ‚úÖ Funci√≥n para validar si una acci√≥n existe en un m√≥dulo
async function validarAccionEnModulo(moduloId, accion) {
  try {
    const modulo = await obtenerModuloPorId(moduloId);
    if (!modulo) {
      return false;
    }

    return modulo.acciones && modulo.acciones.includes(accion);
  } catch (error) {
    console.error(
      `‚ùå Error al validar acci√≥n ${accion} en m√≥dulo ${moduloId}:`,
      error
    );
    return false;
  }
}

// ‚úÖ Limpiar cache manualmente
function limpiarCache() {
  modulosCache = null;
  ultimaActualizacion = 0;
  console.log("üßπ Cache de m√≥dulos limpiado");
}

// ‚úÖ Funci√≥n para forzar recarga de cache
async function recargarCache() {
  limpiarCache();
  const modulos = await obtenerModulosConCache();
  console.log(`üîÑ Cache recargado con ${modulos.length} m√≥dulos`);
  return modulos;
}

// ‚úÖ Funci√≥n para obtener estad√≠sticas del cache
function obtenerEstadisticasCache() {
  return {
    cacheActivo: modulosCache !== null,
    ultimaActualizacion: ultimaActualizacion
      ? new Date(ultimaActualizacion)
      : null,
    tiempoRestante: ultimaActualizacion
      ? Math.max(0, CACHE_DURACION - (Date.now() - ultimaActualizacion))
      : 0,
    cantidadModulos: modulosCache ? modulosCache.length : 0,
  };
}

// ‚úÖ Exportar todas las funciones
module.exports = {
  // Funciones principales
  accionPorMetodo,
  resolverAccion,
  resolverModulo,
  obtenerModulosConCache,

  // Funciones de utilidad
  obtenerModulosMapeados,
  esRutaMapeada,
  obtenerModuloPorId,
  obtenerModulosPorCategoria,
  validarAccionEnModulo,

  // Funciones de debug y mantenimiento
  debugRutas,
  limpiarCache,
  recargarCache,
  obtenerEstadisticasCache,

  // Funciones internas (para testing)
  crearPatronesDeRuta,
  obtenerModulosCompletos,
};
