const jwt = require("jsonwebtoken");
const { PrismaClient } = require("@prisma/client");
const { resolverAccion, resolverModulo } = require("./permisosMapa");

const prisma = new PrismaClient();

const RUTAS_PUBLICAS = [
  /^\/login$/,
  /^\/logout$/,
  /^\/health$/,
  /^\/debug\/usuario\/\d+$/,
  /^\/debug\/token$/,
  /^\/debug\/mapeo$/,
  /^\/uploads\//,
  /^\/api\/upload/,
  /^\/api\/documentos/,
  /^\/api\//,
  /^\/$/, // Ruta ra√≠z
];

module.exports = async function authz(req, res, next) {
  try {
    console.log(`üîí Authz middleware - ${req.method} ${req.path}`);
    console.log(`üîí MIDDLEWARE AUTHZ EJECUT√ÅNDOSE para: ${req.path}`);

    // ‚úÖ Excepciones: rutas p√∫blicas y preflight
    if (req.method === "OPTIONS") {
      console.log("‚úÖ OPTIONS request - permitido");
      return next();
    }

    const esRutaPublica = RUTAS_PUBLICAS.some((r) => r.test(req.path));
    if (esRutaPublica) {
      console.log(`‚úÖ Ruta p√∫blica permitida: ${req.path}`);
      return next();
    }

    // ‚úÖ 1) Extraer token
    const header = req.headers.authorization || "";
    const tokenHeader = header.startsWith("Bearer ") ? header.slice(7) : null;
    const token = req.cookies?.token || tokenHeader;

    console.log(`üé´ Token encontrado:`, {
      hasToken: !!token,
      fromHeader: !!tokenHeader,
      fromCookie: !!req.cookies?.token,
      path: req.path,
    });

    if (!token) {
      console.log("‚ùå No hay token de autenticaci√≥n");
      return res
        .status(401)
        .json({ error: "No autenticado - token requerido" });
    }

    // ‚úÖ 2) Verificar JWT
    let payload;
    try {
      payload = jwt.verify(
        token,
        process.env.JWT_SECRET || "secretoSuperSeguro"
      );
      console.log(`üîç Token decodificado:`, {
        id: payload.id,
        rolId: payload.rolId,
        rolNombre: payload.rolNombre,
      });
    } catch (jwtError) {
      console.log("‚ùå Token JWT inv√°lido:", jwtError.message);
      return res.status(401).json({ error: "Token inv√°lido o expirado" });
    }

    // ‚úÖ 3) Cargar usuario
    console.log(`üë§ Buscando usuario con ID: ${payload.id}`);

    const usuario = await prisma.usuario.findUnique({
      where: { id: payload.id },
      include: { rol: true },
    });

    console.log(`üë§ Usuario encontrado:`, {
      existe: !!usuario,
      activo: usuario?.activo,
      tieneRol: !!usuario?.rol,
      rolNombre: usuario?.rol?.nombre,
      rolActivo: usuario?.rol?.activo,
    });

    if (!usuario || !usuario.activo) {
      console.log("‚ùå Usuario inactivo o no encontrado");
      return res
        .status(401)
        .json({ error: "Usuario inactivo o no encontrado" });
    }

    if (!usuario.rol || !usuario.rol.activo) {
      console.log("‚ùå Usuario sin rol activo");
      return res.status(403).json({
        error: "Sin rol asignado o rol inactivo",
      });
    }

    // ‚úÖ 4) Resolver permisos usando funciones async correctamente
    const permisos = usuario.rol?.permisos || {};

    // ‚úÖ IMPORTANTE: Usar await para funciones async
    const moduloId = await resolverModulo(req.path);
    const accion = resolverAccion(req); // Esta funci√≥n NO es async

    console.log(`üéØ Verificando permisos:`, {
      ruta: req.path,
      moduloId,
      accion,
      tienePermisos: Object.keys(permisos).length > 0,
    });

    // ‚úÖ Si no hay m√≥dulo mapeado, permitir acceso
    if (!moduloId) {
      console.log(`‚ö†Ô∏è M√≥dulo no mapeado para: ${req.path} - PERMITIENDO`);
      req.usuario = {
        id: usuario.id,
        idUsuario: usuario.idUsuario,
        nombre: usuario.nombre,
        email: usuario.email,
        rolId: usuario.rolId,
        rol: usuario.rol,
        permisos,
      };
      return next();
    }

    // ‚úÖ Verificar permisos del m√≥dulo
    const permisoModulo = permisos[moduloId];
    if (!permisoModulo) {
      console.log(`‚ùå Sin permisos para m√≥dulo: ${moduloId}`);
      return res.status(403).json({
        error: `Sin acceso a m√≥dulo ${moduloId}`,
        debug: {
          modulosSolicitado: moduloId,
          modulosDisponibles: Object.keys(permisos),
        },
      });
    }

    // ‚úÖ Verificar "acceso" general al m√≥dulo
    if (permisoModulo.hasOwnProperty("acceso") && !permisoModulo.acceso) {
      console.log(`‚ùå Sin acceso general al m√≥dulo: ${moduloId}`);
      return res.status(403).json({
        error: `Sin acceso a m√≥dulo ${moduloId}`,
        debug: { acceso: permisoModulo.acceso },
      });
    }

    // ‚úÖ Verificar acci√≥n espec√≠fica
    if (!permisoModulo[accion]) {
      console.log(
        `‚ùå Sin permiso para acci√≥n "${accion}" en m√≥dulo "${moduloId}"`
      );
      return res.status(403).json({
        error: `Permiso '${accion}' denegado en ${moduloId}`,
        debug: {
          accionSolicitada: accion,
          accionesDisponibles: Object.keys(permisoModulo).filter(
            (k) => permisoModulo[k] === true
          ),
        },
      });
    }

    console.log(`‚úÖ Permiso concedido: ${accion} en ${moduloId}`);

    // ‚úÖ 5) Agregar usuario al request
    req.usuario = {
      id: usuario.id,
      idUsuario: usuario.idUsuario,
      nombre: usuario.nombre,
      email: usuario.email,
      rolId: usuario.rolId,
      rol: usuario.rol,
      permisos,
    };

    return next();
  } catch (err) {
    console.error("‚ùå Error en authz middleware:", err);
    console.error("Stack trace:", err.stack); // ‚úÖ Agregar stack trace para debugging

    return res.status(500).json({
      error: "Error interno de autorizaci√≥n",
      debug:
        process.env.NODE_ENV === "development"
          ? {
              message: err.message,
              stack: err.stack,
            }
          : undefined,
    });
  }
};
